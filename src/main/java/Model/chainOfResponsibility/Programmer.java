package Model.chainOfResponsibility;

/**
 * 责任链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合
 * 关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。
 * 例子：程序员解决bug
 * 菜鸟程序员解决简单bug
 * 普通程序员解决中等bug
 * 优秀程序员解决困难bug
 *
 * 优点:
 * 1.降低了对象之间的耦合度。在责任链模式中，客户只需要将请求发送到责任链上即可，无须关心请求处理的细节
 * 和请求的传递过程，所以责任链将请求的发送者和请求的处理者解耦了。
 * 2.扩展性强，满足开闭原则，可以根据需要增加新的请求处理类。
 * 3.灵活性强。可以动态地改变链内的成员或者改变链的次序来适应流程的变化。
 * 4.简化了对象之间的连接。每一个对象只需保持一个指向其后继者的引用，不需要保存其他所有处理者的引用，
 * 这避免了使用众多的条件判断语句。
 * 5.责任分担。每个类只需要处理自己该处理的工作，不该处理的传递给下一个对象完成，明确各类的责任范围，
 * 符合类的单一职责原则。
 *
 * 缺点：
 * 1.不能保证每个请求一定被处理，该请求可能一直传递到链的末端都得不到处理。
 * 2.如果责任链过长，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。
 * 3.责任链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于责任链拼接次序错误导致系统出错，
 * 比如可能出现循环调用的问题。
 */
public abstract class Programmer {

    protected Programmer next;
    public void setNext(Programmer next){
        this.next = next;
    }

    //处理bug
    abstract void handle(Bug bug);

}
